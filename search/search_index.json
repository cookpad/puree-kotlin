{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Puree","text":""},{"location":"#description","title":"Description","text":"<p>Puree is a log collector which provides the following features:</p> <ul> <li>Filtering: Enable to interrupt process before sending log. You can add common params to logs, or the sampling of logs.</li> <li>Buffering: Store logs to buffers and send them later.</li> <li>Batching: Send multiple logs in a single request.</li> <li>Retrying: Retry to send logs after backoff time if sending logs fails.</li> </ul> <p></p> <p>Puree helps you unify your logging infrastructure.</p> <p>API Documentation</p>"},{"location":"#installation","title":"Installation","text":"<p>Gradle:</p> <pre><code>repositories {\n  mavenCentral()\n}\n\ndependencies {\n  implementation(\"com.cookpad.puree-kotlin:puree-kotlin:$version\")\n}\n\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#initialization","title":"Initialization","text":"<p>Logs are posted through a <code>PureeLogger</code> instance which should be configured with the filters, outputs, store to be used and the log types to be supported, in <code>Application#onCreate()</code>.</p> <pre><code>class MyApplication : Application() {\n  lateinit var logger: PureeLogger\n\n  override fun onCreate() {\n    logger = PureeLogger.Builder(\n      lifecycle = ProcessLifeycleOwner.get().lifecycle,\n      logSerializer = MyLogSerializer(),\n      logStore = DbPureeLogStore(this, \"my_puree.db\")\n    )\n      .filter(\n        MyFilter(),\n        MyLog::class.java\n      )\n      .output(\n        MyOutput(),\n        MyLog::class.java\n      )\n      .build()\n  }\n}\n</code></pre>"},{"location":"#log-objects-and-serialization","title":"Log objects and serialization","text":"<p>Log objects must implement the <code>PureeLog</code> interface.</p> <pre><code>data class MyLog(val eventName: String) : PureeLog\n</code></pre> <p>Internally, Puree operates on log objects as JSON objects. Puree requires clients to implement a <code>PureeLogSerializer</code> that serializes the logs to JSON.</p> <p>Sample serializer using kotlinx.serialization</p> <pre><code>class MyLogSerializer : PureeLogSerializer {\n  override fun serialize(log: PureeLog): JSONObject {\n    val json = Json.encodeToString(log)\n    return JSONObject(json)\n  }\n}\n</code></pre>"},{"location":"#filters","title":"Filters","text":"<p><code>PureeFilter</code> can be registered to add common fields to specific logs.</p> <pre><code>class AddTimeFilter : PureeFilter {\n  override fun applyFilter(log: JSONObject): JSONObject {\n      return log.apply {\n          put(\"event_time\", System.currentTimeMillis())\n      }\n  }\n}\n</code></pre> <p><code>PureeFilter</code> can also be used to skip logs by returning <code>null</code>\u001b</p> <pre><code>class SamplingFilter(private val samplingRate: Float) : PureeFilter {\n  override fun applyFilter(log: JSONObject): JSONObject? {\n    return log.takeUnless { samplingRate &lt; Random.nextFloat() }\n  }\n}\n</code></pre>"},{"location":"#outputs","title":"Outputs","text":"<p>There are two types of outputs: non-buffered and buffered.</p> <p><code>PureeOutput</code>: Non-buffered output. Writes logs immediately. <code>PureeBufferedOutput</code>: Buffered output. Enqueues logs to a local store and then flush them in the background.</p> <p>For non-buffered outputs, implement a <code>PureeOutput</code></p> <pre><code>class LogcatOutput : PureeOutput {\n  override fun emit(log: JSONObject) {\n      Log.d(\"Puree\", log.toString())\n  }\n}\n</code></pre> <p>For buffered ouptuts, extend <code>PureeBufferedOutput</code>. Buffered outputs can be configured by overriding its settings.</p> <pre><code>class ServerLogBufferedOutput(private val logServerApi: LogServerApi) : PureeBufferedOutput(\"server_log_buffered\") {\n    override val flushInterval: Duration = Duration.ofMinutes(5) // Flush frequency\n    override val logsPerFlush: Int = 1000 // Maximum number of logs in a batch.\n    override val maxRetryCount: Int = 5 // Number of times a flush can be retried on failure\n    override val exponentialBackoffBase: Duration = Duration.ofSeconds(2) // Base wait duration when retrying a failed flush\n    override val purgeableAge: Duration? = Duration.ofDays(30) // How long the buffered logs are kept before purging\n    override val maxFlushSizeInBytes: Long = Long.MAX_VALUE // The maximum size in bytes of the whole payload\n\n    override fun emit(logs: List&lt;JSONObject&gt;, onSuccess: () -&gt; Unit, onFailed: (Throwable) -&gt; Unit) {\n      logServerApi.send(logs) { isSuccessful -&gt;\n        if (isSuccessful) {\n          onSuccess()\n        } else {\n          onFailed(IOException(\"Error\"))\n        }\n      }\n    }\n}\n</code></pre>"},{"location":"#posting-logs","title":"Posting logs","text":"<p>Send logs using the <code>PureeLogger</code> instance:</p> <pre><code>val pureeLogger = PureeLogger.Builder()\n  // Configure the logger\n  .build()\n\npureeLogger.postLog(MyLog())\n</code></pre>"},{"location":"#release-engineering","title":"Release engineering","text":"<ul> <li>Update publication version in <code>gradle/publishing.gradle</code></li> <li>Create a Release in Github</li> <li>Add release notes</li> <li>Publish release</li> </ul>"},{"location":"#license","title":"License","text":"<pre><code>Copyright (c) 2021 Cookpad Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\nOR OTHER DEALINGS IN THE SOFTWARE.\n\n</code></pre>"}]}