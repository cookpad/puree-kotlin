plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'org.jetbrains.dokka' version "$dokkaVersion"
}

apply from: '../gradle/publishing.gradle'

android {
    namespace "com.cookpad.puree.kotlin"

    compileSdkVersion 34

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34
        versionName publication.version.name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        jvmTarget = '17'
    }

    sourceSets {
        test {
            java.srcDirs += "src/sharedTest/java"
        }
        androidTest {
            java.srcDirs += "src/sharedTest/java"
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

dokkaHtml.configure {
    outputDirectory.set(new File(rootDir, "docs/api"))
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
    }
    def pluginConfig = """
{
    "customStyleSheets": ["${new File(rootDir, "docs/assets/logo-styles.css")}"],
    "customAssets": ["${new File(rootDir, "docs/assets/logo.png")}"]
}
"""
    pluginsMapConfiguration.set(["org.jetbrains.dokka.base.DokkaBase": pluginConfig])
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$libVersions.kotlin"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$libVersions.coroutines"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$libVersions.lifecycle"
    api "androidx.lifecycle:lifecycle-process:$libVersions.lifecycle"
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$libVersions.desugar"

    implementation "androidx.room:room-runtime:$libVersions.room"
    kapt "androidx.room:room-compiler:$libVersions.room"

    testImplementation "junit:junit:$libVersions.junit"
    testImplementation "com.google.truth:truth:$libVersions.truth"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$libVersions.coroutines"
    testImplementation "androidx.lifecycle:lifecycle-runtime-testing:$libVersions.lifecycle"
    testImplementation "org.json:json:$libVersions.json"
    testImplementation "androidx.test:core:$libVersions.testCore"
    testImplementation "org.robolectric:robolectric:$libVersions.robolectric"
    testImplementation "io.mockk:mockk:$libVersions.mockk"
    testImplementation "androidx.test.ext:junit:$libVersions.testJunit"

    androidTestImplementation "androidx.test:runner:$libVersions.testRunner"
    androidTestImplementation "androidx.test:rules:$libVersions.testRules"
    androidTestImplementation "com.google.truth:truth:$libVersions.truth"
    androidTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$libVersions.coroutines") {
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
    }
    androidTestImplementation "androidx.lifecycle:lifecycle-runtime-testing:$libVersions.lifecycle"
    androidTestImplementation "androidx.test:core:$libVersions.testCore"
    androidTestImplementation "androidx.test.ext:junit:$libVersions.testJunit"
}
